const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js')
const { PLAYER_FIELDS, PLAYER_STATES } = require('./AudioPlayerEnums')
const { checkMemberInVoiceWithBotAndReply } = require('../../utilities/checkMemberInVoiceWithBot')
const { loggerSend } = require('../../utilities/logger')

class AudioPlayerDiscordGui {
  constructor (musicPlayerMap, distube, playerEmitter, client) {
    this.musicPlayerMap = musicPlayerMap
    this.distube = distube
    this.module = module
    this.playerEmitter = playerEmitter
    this.client = client

    this.setupGuiEvents()
  }

  setupGuiEvents () {
    this.distube
      .on('playSong', async (musicQueue, song) => {
        if (!this.musicPlayerMap[musicQueue.textChannel.guildId]) return
        await this.restorePlayerMessage(musicQueue.textChannel.guild, musicQueue)
        await this.updateEmbedWithSong(musicQueue, song)
        await this.pushChangesToPlayerMessage(musicQueue.textChannel.guildId, musicQueue)
      })
      .on('addSong', async (musicQueue, song) => {
        await musicQueue.textChannel.send({
          content: `–î–æ–±–∞–≤–ª–µ–Ω–æ: ${song.name} - \`${song.formattedDuration}\` –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ –∑–∞–ø—Ä–æ—Å—É \`${song.member.user.username}\``
        })
        await this.restorePlayerMessage(musicQueue.textChannel.guild, musicQueue)
        await this.updateEmbedWithSong(musicQueue, musicQueue.songs[0])
        await this.pushChangesToPlayerMessage(musicQueue.textChannel.guildId, musicQueue)
      })
      .on('addList', async (musicQueue, playlist) => {
        musicQueue.textChannel.send({
          content:
            `–î–æ–±–∞–≤–ª–µ–Ω–æ \`${playlist.songs.length}\` –ø–µ—Å–µ–Ω –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ \`${playlist.name}\` –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ –∑–∞–ø—Ä–æ—Å—É \`${playlist.member.user.username}\``
        })
        await this.restorePlayerMessage(musicQueue.textChannel.guild, musicQueue)
        await this.updateEmbedWithSong(musicQueue, musicQueue.songs[0])
        await this.pushChangesToPlayerMessage(musicQueue.textChannel.guildId, musicQueue)
      })
      /*
      .on('finishSong', async musicQueue => {
        const guild = musicQueue.textChannel.guildId
        if (!this.musicPlayerMap[guild]) return
        if (!musicQueue.next) {
          await this.setPlayerEmbedState(guild, PLAYER_STATES.waiting)
          await this.pushChangesToPlayerMessage(guild, musicQueue)
        }
      })
       */
      .on('empty', queue => queue.textChannel.send('–í—Å–µ —É—à–ª–∏ –æ—Ç –º–µ–Ω—è, –∑–Ω–∞—á–∏—Ç —è —Ç–æ–∂–µ —É—Ö–æ–∂—É.'))

    this.playerEmitter
      .on('songSkipped', async (queue, username) => {
        queue.textChannel.send({ content: `${username} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –ø–µ—Å–Ω—é ${queue.songs[0].name} - ${queue.songs[0].uploader.name}` })
      })
      .on('queueShuffle', async (queue, username) => {
        queue.textChannel.send(`${username} –ø–µ—Ä–µ–º–µ—à–∞–ª –≤—Å–µ –ø–µ—Å–Ω–∏`)
      })
      .on('songDeleted', async (queue, position, username) => {
        const messageWithPlayer = await this.getPlayerMessageInGuild(queue.textChannel.guild)
        if (!messageWithPlayer) return
        if (position > 0) {
          await messageWithPlayer.channel.send({ content: `${username} —É–¥–∞–ª–∏–ª –ø–µ—Å–Ω—é –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ${queue.songs[position].name} - ${queue.songs[position].uploader.name}` })
        }
        if (position < 0) {
          await messageWithPlayer.channel.send({ content: `${username} —É–¥–∞–ª–∏–ª –ø–µ—Å–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—à–ª—ã—Ö –ø–µ—Å–µ–Ω ${queue.previousSongs[position].name} - ${queue.previousSongs[position].uploader.name}` })
        }
        this.editField(queue.textChannel.guild.id, PLAYER_FIELDS.remaining_songs, (queue.songs.length - 1).toString())
        await messageWithPlayer.edit({ embeds: [this.musicPlayerMap[queue.textChannel.guild.id].PlayerEmbed] })
      })
      .on('playerResume', async (guild) => {
        const messageWithPlayer = await this.getPlayerMessageInGuild(guild)
        await this.setPlayerEmbedState(messageWithPlayer.guild.id, PLAYER_STATES.playing)
        await messageWithPlayer.edit({ embeds: [this.musicPlayerMap[messageWithPlayer.guild.id].PlayerEmbed] })
      })
      .on('playerPause', async (guild) => {
        const messageWithPlayer = await this.getPlayerMessageInGuild(guild)
        await this.setPlayerEmbedState(messageWithPlayer.guild.id, PLAYER_STATES.paused)
        await messageWithPlayer.edit({ embeds: [this.musicPlayerMap[messageWithPlayer.guild.id].PlayerEmbed] })
      })
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–µ–µ—Ä–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç
   * @param queue
   */
  async createPlayer (queue) {
    await this.playerEmitter.emit('destroyPlayer', queue.textChannel.guild)
    const Player = this.createPlayerEmbed()

    const guildId = queue.textChannel.guild.id

    const musicPlayerMessage = await queue.textChannel.send(Player) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–µ–µ—Ä–æ–º

    const filter = button => button.customId
    this.musicPlayerMap[guildId] = {
      MessageID: musicPlayerMessage.id,
      ChannelID: musicPlayerMessage.channel.id,
      PlayerEmbed: Player.embeds[0],
      Collector: musicPlayerMessage.channel.createMessageComponentCollector({ filter })
    }

    const collector = this.musicPlayerMap[guildId].Collector

    collector.on('collect', async button => {
      try {
        if (button.customId === 'show_queue') {
          const showQueue = this.distube.getQueue(button.guild)
          if (!showQueue) {
            await button.reply({ content: '–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è', ephemeral: true })
          } else {
            let queueList = ''

            let song = ''
            for (let i = 1; i < Math.min(31, showQueue.songs.length); i++) {
              song = showQueue.songs[i]
              queueList += `${i + 1}. ` + `[${song.name}](${song.url})` + ` - \`${song.formattedDuration}\`\n`
            }

            if (showQueue.songs.length > 32) {
              queueList += `–ò –µ—â—ë ${showQueue.songs.length - 33} –ø–µ—Å–Ω–∏ –∂–¥—É—Ç —Å–≤–æ–µ–≥–æ —á–∞—Å–∞`
            }

            const queueEmbed = new EmbedBuilder()
              .setAuthor({ name: '–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: ' })
              .setTitle('1. ' + showQueue.songs[0].name).setURL(showQueue.songs[0].url)
              .setDescription(`**–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–µ—Å–Ω–∏: **\n${queueList}`.slice(0, 4096))
            await button.reply({ embeds: [queueEmbed], ephemeral: true }
            )
          }

          return
        }

        if (button.customId === 'download_song') {
          const song = this.distube.getQueue(queue.textChannel.guild).songs[0]

          await this.downloadSong(song, button.message, button.user.username)
          return
        }

        if (!await checkMemberInVoiceWithBotAndReply(button.member, button)) { return }

        if (button.customId === 'stop_music') {
          this.playerEmitter.emit('stopPlayer', button.guild)
          await button.message.channel.send({ content: `${button.user.username} –≤—ã–∫–ª—é—á–∏–ª –ø–ª–µ–µ—Ä` })

          return
        }

        if (button.customId === 'pause_music') {
          this.playerEmitter.emit('playerSwitchPauseAndResume', button.guild)
          await button.deferUpdate()

          return
        }

        if (button.customId === 'toggle_repeat') {
          await this.changeRepeatMode(button.message)
          await button.deferUpdate()

          return
        }

        if (button.customId === 'skip_song') {
          this.playerEmitter.emit('songSkipped', button.guild, button.user.username)
          await button.deferUpdate()
        }
      } catch (e) {
        try {
          await button.deferUpdate()
        } catch (e) {

        }
      }
    })
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –≤ –ø–ª–µ–µ—Ä–µ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Discord
   *
   * @param guildID
   * @param field - PLAYERFIELDS
   * @param value
   */
  editField (guildID, field, value) {
    this.musicPlayerMap[guildID].PlayerEmbed.data.fields[field].value = value || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–¥–µ, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–ª–µ–µ—Ä –≤ Discord
   *
   * @param guild
   */
  async getPlayerMessageInGuild (guild) {
    const guildId = guild.id
    const channel = await this.client.channels.cache.get(this.musicPlayerMap[guildId]?.ChannelID)
    if (!channel) return undefined
    return channel.messages.cache.get(this.musicPlayerMap[guildId]?.MessageID)
  }

  /**
   * –ú–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ (—Ü–≤–µ—Ç, —Ç–µ–∫—Å—Ç), –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Discord
   *
   * @param guildID
   * @param state - waiting || playing || paused
   */
  async setPlayerEmbedState (guildID, state) {
    if (!this.musicPlayerMap[guildID].PlayerEmbed) return
    switch (state) {
      case PLAYER_STATES.waiting:
        await this.musicPlayerMap[guildID].PlayerEmbed.setTitle(null).setURL(null).setAuthor({ name: 'üíø –û–∂–∏–¥–∞–Ω–∏–µ üíø' }).setColor('#43f7f7').setThumbnail(null)
        for (const playerField in PLAYER_FIELDS) { // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º –≤ –ø–ª–µ–µ—Ä–µ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          this.editField(guildID, PLAYER_FIELDS[playerField], undefined)
        }
        break

      case PLAYER_STATES.playing:
        await this.musicPlayerMap[guildID].PlayerEmbed.setAuthor({ name: 'üéµ –ò–≥—Ä–∞–µ—Ç üéµ' }).setColor('#49f743')
        break

      case PLAYER_STATES.paused:
        await this.musicPlayerMap[guildID].PlayerEmbed.setAuthor({ name: '‚è∏Ô∏è –ü–∞—É–∑–∞ ‚è∏Ô∏è ' }).setColor('#f74343')
        break
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–µ–µ—Ä –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∏–º –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
   * @param guild
   * @param queue
   */
  async restorePlayerMessage (guild, queue) {
    if (this.musicPlayerMap[guild.id]) {
      try {
        const messagePlayer = await this.getPlayerMessageInGuild(guild)
        if (messagePlayer === undefined) {
          await this.playerEmitter.emit('destroyPlayer', guild)
        }
      } catch (e) {

      }
    }
    await this.createPlayer(queue)
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—è–º–∏ –ø–ª–µ–µ—Ä–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ Discord
   * @param guildID
   * @param musicQueue
   * @returns {Promise<void>}
   */
  async pushChangesToPlayerMessage (guildID, musicQueue) {
    try {
      let message
      const channel = await musicQueue.textChannel
      if (channel) {
        message = await channel.messages.cache.get(this.musicPlayerMap[guildID].MessageID)
      }
      if (message) {
        await message.edit({ embeds: [this.musicPlayerMap[guildID].PlayerEmbed] })
      }
    } catch (e) {
      loggerSend(e)
    }
  }

  /**
   * –ò–∑–º–µ–Ω—è–µ—Ç –ø–µ—Å–Ω—é, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é –≤ –ø–ª–µ–µ—Ä–µ
   * @param queue
   * @param song
   */
  async updateEmbedWithSong (queue, song) {
    const guild = queue.textChannel.guildId
    await this.setPlayerEmbedState(guild, PLAYER_STATES.playing)
    this.editField(guild, PLAYER_FIELDS.author, song.uploader.name)
    this.editField(guild, PLAYER_FIELDS.requester, song.user.username)
    if (song.isLive) {
      this.editField(guild, PLAYER_FIELDS.duration, ':red_circle:' + ' –ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è')
    } else {
      this.editField(guild, PLAYER_FIELDS.duration, song.formattedDuration)
    }
    this.editField(guild, PLAYER_FIELDS.queue_duration, queue.formattedDuration)
    this.editField(guild, PLAYER_FIELDS.remaining_songs, (queue.songs.length - 1).toString())
    await this.musicPlayerMap[guild].PlayerEmbed.setThumbnail(song.thumbnail).setTitle(song.name).setURL(song.url)
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç embed —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ê—É–¥–∏–æ –ü–ª–µ–µ—Ä–∞, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ.
   */
  createPlayerEmbed () {
    const musicPlayerEmbed = new EmbedBuilder()// –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–µ–µ—Ä–æ–º
      .setColor('#f7ee43')
      .setAuthor({ name: '‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ ‚åõ' })
      .addFields(
        { name: '–ê–≤—Ç–æ—Ä', value: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' },
        { name: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Å–Ω–∏', value: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', inline: false },
        { name: '–û—Å—Ç–∞–≤—à–∞—è—Å—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—á–µ—Ä–µ–¥–∏', value: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', inline: false },
        { name: '–û—Å—Ç–∞–ª–æ—Å—å –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏', value: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', inline: true },
        { name: '–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞', value: '–í—ã–∫–ª—é—á–µ–Ω', inline: true },
        { name: '–≠—Ç—É –ø–µ—Å–Ω—é –∑–∞–ø—Ä–æ—Å–∏–ª', value: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', inline: true }
      )

    const musicPlayerRowPrimary = new ActionRowBuilder()// –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–ª–µ–µ—Ä–∞
      .addComponents(
        new ButtonBuilder().setCustomId('stop_music').setLabel('–í—ã–∫–ª—é—á–∏—Ç—å').setStyle(ButtonStyle.Danger),
        new ButtonBuilder().setCustomId('pause_music').setLabel('–ü–∞—É–∑–∞ / –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('toggle_repeat').setLabel('–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('skip_song').setLabel('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å').setStyle(ButtonStyle.Primary)
      )

    const musicPlayerRowSecondary = new ActionRowBuilder()// –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–ª–µ–µ—Ä–∞
      .addComponents(
        new ButtonBuilder().setCustomId('show_queue').setLabel('–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å').setStyle(ButtonStyle.Secondary),
        new ButtonBuilder().setCustomId('download_song').setLabel('–°–∫–∞—á–∞—Ç—å –ø–µ—Å–Ω—é').setStyle(ButtonStyle.Secondary)
      )

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Discord
    return { embeds: [musicPlayerEmbed], components: [musicPlayerRowPrimary, musicPlayerRowSecondary] }
  }
}

module.exports = { DiscordGui: AudioPlayerDiscordGui }
