const { MessageActionRow, MessageButton } = require('discord.js')
const voice = require('@discordjs/voice')
const { generateRandomCharacters } = require('../tools')
const { getVoiceConnection } = require('@discordjs/voice')
const fs = require('fs')
const ytdl = require('ytdl-core')
const Discord = module.require('discord.js')

/**
 * –°–æ–∑–¥–∞—ë—Ç embed —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–æ–º –ê—É–¥–∏–æ –ü–ª–µ–µ—Ä–∞, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ.
 *
 * @returns {{embeds: (Discord.MessageEmbed|Promise<Role>)[], components: MessageActionRow[]}}
 */
module.exports.createPlayerEmbed = () => {
  const musicPlayerEmbed = new Discord.MessageEmbed()// –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–µ–µ—Ä–æ–º
    .setColor('#f7ee43')
    .setAuthor({ name: '‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ ‚åõ' })
    .addFields(
      { name: '–ê–≤—Ç–æ—Ä', value: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' },
      { name: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Å–Ω–∏', value: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', inline: false },
      { name: '–û—Å—Ç–∞–≤—à–∞—è—Å—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—á–µ—Ä–µ–¥–∏', value: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', inline: true },
      { name: '–û—Å—Ç–∞–ª–æ—Å—å –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏', value: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', inline: true },
      { name: '–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞', value: '–í—ã–∫–ª—é—á–µ–Ω', inline: true }
    )

  const musicPlayerRowPrimary = new MessageActionRow()// –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–ª–µ–µ—Ä–∞
    .addComponents(
      new MessageButton().setCustomId('stop_music').setLabel('–í—ã–∫–ª—é—á–∏—Ç—å').setStyle('DANGER'),
      new MessageButton().setCustomId('pause_music').setLabel('–ü–∞—É–∑–∞ / –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å').setStyle('PRIMARY'),
      new MessageButton().setCustomId('toggle_repeat').setLabel('–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞').setStyle('PRIMARY'),
      new MessageButton().setCustomId('skip_song').setLabel('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å').setStyle('PRIMARY')
    )

  const musicPlayerRowSecondary = new MessageActionRow()// –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–ª–µ–µ—Ä–∞
    .addComponents(
      new MessageButton().setCustomId('show_queue').setLabel('–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å').setStyle('SECONDARY'),
      new MessageButton().setCustomId('download_song').setLabel('–°–∫–∞—á–∞—Ç—å –ø–µ—Å–Ω—é').setStyle('SECONDARY')
      // new MessageButton().setCustomId('show_lyrics').setLabel('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏').setStyle('SECONDARY')
    )

  return { embeds: [musicPlayerEmbed], components: [musicPlayerRowPrimary, musicPlayerRowSecondary] }
}

module.exports.createPlayer = async (client, queue, distube) => {
  await module.exports.clearPlayerState(queue.textChannel.guild)
  const Player = module.exports.createPlayerEmbed()

  const guildId = queue.textChannel.guild.id

  const musicPlayerMessage = await queue.textChannel.send(Player) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–µ–µ—Ä–æ–º
  musicPlayerMap[guildId] = {
    MessageID: musicPlayerMessage.id,
    ChannelID: musicPlayerMessage.channel.id,
    PlayerEmbed: Player.embeds[0],
    Collector: ''
  }

  const filter = button => button.customId

  const collector = musicPlayerMessage.channel.createMessageComponentCollector({ filter })
  musicPlayerMap[guildId].Collector = collector

  collector.on('collect', async button => {
    // const permissions = [Permissions.FLAGS.SEND_MESSAGES, Permissions.FLAGS.CONNECT, Permissions.FLAGS.VIEW_CHANNEL, Permissions.FLAGS.SPEAK, Permissions.FLAGS.MANAGE_MESSAGES, Permissions.FLAGS.ATTACH_FILES]
    // if (!CheckAllNecessaryPermission(client, message, permissions)) { return }

    const connection = getVoiceConnection(guildId)

    if (button.customId === 'show_queue') {
      const showQueue = distube.getQueue(button.guild)
      if (!showQueue) {
        await button.reply({ content: '–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è', ephemeral: true })
      } else {
        let queueList = ''

        let song = ''
        for (let i = 1; i < Math.min(31, showQueue.songs.length); i++) {
          song = showQueue.songs[i]
          queueList += `${i}. ` + `[${song.name}](${song.url})` + ` - \`${song.formattedDuration}\`\n`
        }

        if (showQueue.songs.length > 31) {
          queueList += `–ò –µ—â—ë ${showQueue.songs.length - 32} –ø–µ—Å–Ω–∏ –∂–¥—É—Ç —Å–≤–æ–µ–≥–æ —á–∞—Å–∞`
        }

        const queueEmbed = new Discord.MessageEmbed()
          .setAuthor({ name: '–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: ' })
          .setTitle(showQueue.songs[0].name).setURL(showQueue.songs[0].url)
          .setDescription(`**–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–µ—Å–Ω–∏: **\n${queueList}`.slice(0, 4096))
        await button.reply({ embeds: [queueEmbed], ephemeral: true }
        )
      }
    }

    if (button.customId === 'download_song') {
      const song = distube.getQueue(queue.textChannel.guild).songs[0]

      await module.exports.downloadSong(song, button.message, button.user.username)
    }

    if (connection) {
      if (connection.joinConfig.channelId !== button.member.voice.channelId) {
        await button.message.channel.send({ content: `${button.user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏, –Ω–æ –æ–Ω –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ —Å–æ –º–Ω–æ–π!` })
        return
      }
    } else {
      if (distube.getQueue(queue.textChannel.guild)) {
        await distube.stop(queue.textChannel.guild)
      }
    }

    /*
          if(button.member.permissions.has('MANAGE_GUILD') || button.member.user.id === message.author.id || message.guild.me.voice.channel.members.size < 2){
          }else{
              await button.reply({content: "–£ —Ç–µ–±—è –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–ª–µ–µ—Ä–∞", ephemeral: true})
              return
          }
    */
    if (button.customId === 'stop_music') {
      const vc = voice.getVoiceConnection(button.guild.id)
      if (vc) await voice.getVoiceConnection(button.guild.id).destroy()
      await button.message.channel.send({ content: `${button.user.username} –≤—ã–∫–ª—é—á–∏–ª –ø–ª–µ–µ—Ä` })
    }

    if (button.customId === 'pause_music') {
      await module.exports.pausePlayer(distube, button.message)
      await button.deferUpdate()
    }

    if (button.customId === 'toggle_repeat') {
      await module.exports.changeRepeatMode(distube, button.message)
      await button.deferUpdate()
    }

    if (button.customId === 'skip_song') {
      await module.exports.skipSong(distube, distube.getQueue(queue.textChannel.guild), button.message, button.user.username)
      await button.deferUpdate()
    }
  })
}

module.exports.updateEmbedWithSong = async (queue, song) => {
  const guild = queue.textChannel.guildId
  await module.exports.setPlayerEmbedState(guild, PLAYER_STATES.playing)
  module.exports.editField(guild, PLAYER_FIELDS.author, song.uploader.name)
  if (song.isLive) {
    module.exports.editField(guild, PLAYER_FIELDS.duration, ':red_circle:' + ' –ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è')
  } else {
    module.exports.editField(guild, PLAYER_FIELDS.duration, song.formattedDuration)
  }
  module.exports.editField(guild, PLAYER_FIELDS.queue_duration, queue.formattedDuration)
  module.exports.editField(guild, PLAYER_FIELDS.remaining_songs, (queue.songs.length - 1).toString())
  await musicPlayerMap[guild].PlayerEmbed.setThumbnail(song.thumbnail).setTitle(song.name).setURL(song.url)
}

const PLAYER_FIELDS = {
  author: 0,
  duration: 1,
  queue_duration: 2,
  remaining_songs: 3,
  repeat_mode: 4
}
module.exports.PLAYER_FIELDS = PLAYER_FIELDS

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –≤ –ø–ª–µ–µ—Ä–µ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Discord
 *
 * @param guildID
 * @param field - PLAYERFIELDS.author || duration || queue_duration || remaining_songs || repeat_mode
 * @param value
 */
module.exports.editField = (guildID, field, value) => {
  musicPlayerMap[guildID].PlayerEmbed.fields[field].value = value || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
}

const PLAYER_STATES = {
  waiting: 0,
  playing: 1,
  paused: 2
}
module.exports.PLAYER_STATES = PLAYER_STATES

/**
 * –ú–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ (—Ü–≤–µ—Ç, —Ç–µ–∫—Å—Ç), –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Discord
 *
 * @param guildID
 * @param state - waiting || playing || paused
 */
module.exports.setPlayerEmbedState = async (guildID, state) => {
  switch (state) {
    case PLAYER_STATES.waiting:
      await musicPlayerMap[guildID].PlayerEmbed.setTitle('').setURL('').setAuthor({ name: 'üíø –û–∂–∏–¥–∞–Ω–∏–µ üíø' }).setColor('#43f7f7').setThumbnail(null)
      module.exports.editField(guildID, PLAYER_FIELDS.author, undefined)
      module.exports.editField(guildID, PLAYER_FIELDS.duration, undefined)
      module.exports.editField(guildID, PLAYER_FIELDS.queue_duration, undefined)
      module.exports.editField(guildID, PLAYER_FIELDS.remaining_songs, undefined)
      break

    case PLAYER_STATES.playing:
      await musicPlayerMap[guildID].PlayerEmbed.setAuthor({ name: 'üéµ –ò–≥—Ä–∞–µ—Ç üéµ' }).setColor('#49f743')
      break

    case PLAYER_STATES.paused:
      await musicPlayerMap[guildID].PlayerEmbed.setAuthor({ name: '‚è∏Ô∏è –ü–∞—É–∑–∞ ‚è∏Ô∏è ' }).setColor('#f74343')
      break
  }
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–µ–µ—Ä–∞ –∏ –ø–æ–ª–µ–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ Discord
 *
 * @param guildID
 * @param musicQueue
 * @returns {Promise<void>}
 */
module.exports.pushChangesToPlayerMessage = async (guildID, musicQueue) => {
  try {
    let message
    const channel = await musicQueue.textChannel.fetch(musicPlayerMap[guildID].ChannelID)
    if (channel) {
      message = await channel.messages.fetch(musicPlayerMap[guildID].MessageID)
    }
    if (message) {
      await message.edit({ embeds: [musicPlayerMap[guildID].PlayerEmbed] })
    }
  } catch (e) {

  }
}

module.exports.clearPlayerState = async (guild) => {
  if (musicPlayerMap[guild.id]) {
    await musicPlayerMap[guild.id].Collector.stop()
    const channel = guild.channels.cache.get(musicPlayerMap[guild.id].ChannelID)
    await channel.messages.fetch(musicPlayerMap[guild.id].MessageID).then((m) => {
      m.delete()
    })
    delete musicPlayerMap[guild.id]
  }
}

module.exports.stopPlayer = async (distube, guild) => {
  const vc = voice.getVoiceConnection(guild.id)
  if (vc) await voice.getVoiceConnection(guild.id).destroy()
  await module.exports.clearPlayerState(guild)
}

module.exports.pausePlayer = async (distube, message) => {
  const queue = distube.getQueue(message)
  if (queue.paused) {
    await distube.resume(message)
    await module.exports.setPlayerEmbedState(message.guild.id, PLAYER_STATES.playing)
  } else {
    await distube.pause(message)
    await module.exports.setPlayerEmbedState(message.guild.id, PLAYER_STATES.paused)
  }

  await message.edit({ embeds: [musicPlayerMap[message.guild.id].PlayerEmbed] })
}

module.exports.changeRepeatMode = async (distube, message) => {
  const queue = distube.getQueue(message)
  if (queue) {
    const repeat = queue.repeatMode
    let mode
    switch (repeat) {
      case 0:
        queue.setRepeatMode(1)
        mode = '–ü–µ—Å–Ω—è'
        break
      case 1:
        queue.setRepeatMode(2)
        mode = '–û—á–µ—Ä–µ–¥—å'
        break
      case 2:
        queue.setRepeatMode(0)
        mode = '–í—ã–∫–ª—é—á–µ–Ω'
        break
    }

    module.exports.editField(message.guild.id, PLAYER_FIELDS.repeat_mode, mode)
    await message.edit({ embeds: [musicPlayerMap[message.guild.id].PlayerEmbed] })
  }
}

module.exports.skipSong = async (distube, queue, message, username) => {
  if (queue.songs.length > 1) {
    await distube.skip(queue.textChannel.guild)
    await message.reply({ content: `–ü–æ –∑–∞–ø—Ä–æ—Å—É –æ—Ç ${username} –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø–µ—Å–Ω—è` })
    if (queue.paused) {
      await distube.resume(queue.textChannel.guild)
    }
  } else {
    await message.reply({ content: '–í –æ—á–µ—Ä–µ–¥–∏ –¥–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç', ephemeral: true })
  }
}

module.exports.downloadSong = async (song, message, username) => {
  if (song.isLive) {
    await message.channel.send({ content: `${username} —ç—Ç–æ –ø—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è, –µ—ë –Ω–µ–ª—å–∑—è —Å–∫–∞—á–∞—Ç—å!` })
    return 0
  }

  const filePath = fs.createWriteStream(`${generateRandomCharacters(15)}.mp3`)

  const fileName = `${song.name}.mp3`

  ytdl(song.url, { filter: 'audioonly', format: 'mp3' }).on('end', async () => {
    await fs.rename(filePath.path, fileName, err => { if (err) throw err })
    const stats = fs.statSync(fileName)
    if (stats.size >= 8388608) {
      await message.channel.send({ content: `${username} —è –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ —á–µ–º 8–º–±.` })
    } else {
      await message.channel.send({ content: `${username} —è —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –∑–≤—É–∫`, files: [fileName] })
    }

    fs.unlink(fileName, err => { if (err) throw err })
  }).pipe(filePath)
}

module.exports.CheckUserInVoice = async (client, message) => {
  if (!message.member.voice.channel) {
    await message.reply('–ó–∞–π–¥–∏ —Å–Ω–∞—á–∞–ª–∞ –≤ –ª—é–±–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª')
    return true
  }

  const connection = getVoiceConnection(message.guild.id)
  if (connection) {
    if (connection.joinConfig.channelId !== message.member.voice.channel.id) {
      client.channels.fetch(connection.joinConfig.channelId)
        .then(channel => message.reply({ content: `–ó–∞–π–¥–∏ –Ω–∞ –∫–∞–Ω–∞–ª ${channel.name} ` }))
      return true
    }
  }

  return false
}
