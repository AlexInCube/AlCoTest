const {MessageActionRow , MessageButton} = require("discord.js");
const voice = require("@discordjs/voice");
const Discord = module.require("discord.js");


/**
 * –°–æ–∑–¥–∞—ë—Ç embed —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–æ–º –ê—É–¥–∏–æ –ü–ª–µ–µ—Ä–∞, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ.
 *
 * @returns {{embeds: (Discord.MessageEmbed|Promise<Role>)[], components: MessageActionRow[]}}
 */
module.exports.createPlayer = () => {
    let musicPlayerEmbed = new Discord.MessageEmbed()//–°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–µ–µ—Ä–æ–º
        .setColor('#f7ee43')
        .setAuthor({name: "‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ ‚åõ"})
        .addFields(
            {name: '–ê–≤—Ç–æ—Ä', value: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"},
            {name: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Å–Ω–∏', value: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",inline: false},
            {name: '–û—Å—Ç–∞–≤—à–∞—è—Å—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—á–µ—Ä–µ–¥–∏', value: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",inline: true},
            {name: '–û—Å—Ç–∞–ª–æ—Å—å –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏', value: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",inline: true},
            {name: '–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞', value: "–í—ã–∫–ª—é—á–µ–Ω",inline: true},
        )

    const musicPlayerRowPrimary = new MessageActionRow()//–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–ª–µ–µ—Ä–∞
        .addComponents(
            new MessageButton().setCustomId("stop_music").setLabel("–í—ã–∫–ª—é—á–∏—Ç—å").setStyle("DANGER"),
            new MessageButton().setCustomId("pause_music").setLabel("–ü–∞—É–∑–∞ / –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å").setStyle("PRIMARY"),
            new MessageButton().setCustomId("toggle_repeat").setLabel("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞").setStyle("PRIMARY"),
            new MessageButton().setCustomId("skip_song").setLabel("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å").setStyle("PRIMARY"),
        )

    const musicPlayerRowSecondary = new MessageActionRow()//–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–ª–µ–µ—Ä–∞
        .addComponents(
            new MessageButton().setCustomId("show_queue").setLabel("–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å").setStyle("SECONDARY"),
            new MessageButton().setCustomId("download_song").setLabel("–°–∫–∞—á–∞—Ç—å –ø–µ—Å–Ω—é").setStyle("SECONDARY"),
            new MessageButton().setCustomId("show_lyrics").setLabel("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏").setStyle("SECONDARY"),
        )


    return {embeds: [musicPlayerEmbed], components: [musicPlayerRowPrimary,musicPlayerRowSecondary]}
}


const PLAYER_FIELDS = {
    author: 0,
    duration: 1,
    queue_duration: 2,
    remaining_songs: 3,
    repeat_mode: 4
}
module.exports.PLAYER_FIELDS = PLAYER_FIELDS

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –≤ –ø–ª–µ–µ—Ä–µ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Discord
 *
 * @param guildID
 * @param field - PLAYERFIELDS.author || duration || queue_duration || remaining_songs || repeat_mode
 * @param value
 */
module.exports.editField = function editField(guildID,field,value){
    musicPlayerMap[guildID].PlayerEmbed.fields[field].value = value || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
}

const PLAYER_STATES = {
    waiting: 0,
    playing: 1,
    paused: 2
}
module.exports.PLAYER_STATES = PLAYER_STATES

/**
 * –ú–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ (—Ü–≤–µ—Ç, —Ç–µ–∫—Å—Ç), –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Discord
 *
 * @param guildID
 * @param state - waiting || playing || paused
 */
module.exports.setPlayerState = async (guildID , state) => {
    switch (state) {
        case PLAYER_STATES.waiting:
            await musicPlayerMap[guildID].PlayerEmbed.setTitle("").setURL("").setAuthor({name: `üíø –û–∂–∏–¥–∞–Ω–∏–µ üíø`}).setColor('#43f7f7').setThumbnail(null);
            module.exports.editField(guildID , PLAYER_FIELDS.author, undefined)
            module.exports.editField(guildID , PLAYER_FIELDS.duration, undefined)
            module.exports.editField(guildID , PLAYER_FIELDS.queue_duration, undefined)
            module.exports.editField(guildID , PLAYER_FIELDS.remaining_songs, undefined)
            break

        case PLAYER_STATES.playing:
            await musicPlayerMap[guildID].PlayerEmbed.setAuthor({name: `üéµ –ò–≥—Ä–∞–µ—Ç üéµ`}).setColor('#49f743');
            break

        case PLAYER_STATES.paused:
            await musicPlayerMap[guildID].PlayerEmbed.setAuthor({name: `‚è∏Ô∏è –ü–∞—É–∑–∞ ‚è∏Ô∏è `}).setColor('#f74343');
            break
    }
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–µ–µ—Ä–∞ –∏ –ø–æ–ª–µ–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ Discord
 *
 * @param guildID
 * @param music_queue
 * @returns {Promise<void>}
 */
module.exports.pushChangesToPlayerMessage = async (guildID , music_queue) => {
    try {
        let message;
        let channel = await music_queue.textChannel.fetch(musicPlayerMap[guildID].ChannelID);
        if (channel){
            message = await channel.messages.fetch(musicPlayerMap[guildID].MessageID);
        }
        if (message){
            await message.edit({embeds: [musicPlayerMap[guildID].PlayerEmbed]});
        }
    } catch (e) {

    }
}

module.exports.downloadSong = async (song) => {

}

module.exports.stopPlayer = async (distube,guild) => {
    let queue = distube.getQueue(guild)
    if (queue) {
        await distube.stop(guild);
    } else {
        let vc = voice.getVoiceConnection(guild.id)
        if (vc) await voice.getVoiceConnection(guild.id).destroy()
        await musicPlayerMap[guild.id].Collector.stop()
        let channel = guild.channels.cache.get(musicPlayerMap[guild.id].ChannelID)
        await channel.messages.fetch(musicPlayerMap[guild.id].MessageID).then((m) => {
            m.delete()
        });
        delete musicPlayerMap[guild.id];
    }
}