import {EmbedBuilder, User} from "discord.js";
import {AudioPlayerLoopMode, AudioPlayerState} from "./AudioPlayerTypes";
import {getNoun} from "../../../utilities/getNoun";
import progressBar from "string-progressbar"
import {formatSecondsToTime} from "../../../utilities/formatSecondsToTime";

export class AudioPlayerEmbedBuilder {
    private playerState: AudioPlayerState = "loading"
    private requester: User | undefined = undefined
    private uploader = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    private songsCount = 0
    private queueDuration = "00:00"
    private loop = "–í—ã–∫–ª—é—á–µ–Ω–æ"
    private nextSong = ""

    private currentDuration = 0
    private formattedCurrentDuration = "00:00"
    private maxDuration = 0
    private formattedMaxDuration = "00:00"
    private duration_bar = ""

    private readonly embed: EmbedBuilder = new EmbedBuilder();

    constructor() {
        this.setPlayerState("loading")
        this.setSongDuration(1, 1, false)
        this.setNextSong(undefined)
    }

    getEmbed() {
        this.embed.setFields([]) // Reset all fields
        if (this.playerState != "waiting" && this.playerState != "loading"){
            if (this.requester){
                this.embed.addFields({name: "–ó–∞–ø—Ä–æ—Å–∏–ª", value: this.requester.toString(), inline: true})
            }

            this.embed.addFields({name: "–ê–≤—Ç–æ—Ä", value: `\`${this.uploader}\``, inline: true})
            this.embed.addFields({name: "–û—á–µ—Ä–µ–¥—å", value: `
                \`${this.songsCount} ${getNoun(this.songsCount, "–ø–µ—Å–Ω—è", "–ø–µ—Å–Ω–∏", "–ø–µ—Å–µ–Ω")}\`
                 \`${this.queueDuration}\`
                 `, inline: true})
            this.embed.addFields({name: "–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞", value: `\`${this.loop}\``, inline: true})
            this.embed.addFields({name: "–°–ª–µ–¥—É—é—â–∞—è –ø–µ—Å–Ω—è", value: `\`${this.nextSong}\``, inline: true})
            this.embed.addFields({
                name: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ",
                value: `${this.duration_bar}
                    \`[${this.formattedCurrentDuration} / ${this.formattedMaxDuration}]\``,
                inline: false
            })
        }

        return this.embed
    }

    setSongTitle(name: string, url: string){
        this.embed.setTitle(name)
        this.embed.setURL(url)
    }

    setThumbnail(url: string){
        this.embed.setThumbnail(url)
    }
    setPlayerState(state: AudioPlayerState){
        this.playerState = state

        switch (this.playerState){
            case "waiting":
                this.embed.setAuthor({name: 'üíø –û–∂–∏–¥–∞–Ω–∏–µ üíø'}).setColor('#43f7f7').setURL(null).setTitle(null).setThumbnail(null)
                break
            case "pause":
                this.embed.setAuthor({name: '‚è∏Ô∏è –ü–∞—É–∑–∞ ‚è∏Ô∏è '}).setColor('#f74343')
                break
            case "playing":
                this.embed.setAuthor({name: '‚ñ∂Ô∏è –ò–≥—Ä–∞–µ—Ç ‚ñ∂Ô∏è'}).setColor('#49f743')
                break
            case "loading":
                this.embed.setAuthor({name: '‚åö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... ‚åö'}).setColor('#f1f743').setURL(null).setTitle(null).setThumbnail(null)
                break
        }
    }

    setRequester(user: User){
        this.requester = user
    }

    setUploader(uploader: string | undefined){
        this.uploader = uploader ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }

    setQueueData(songs_count: number, queue_duration: number){
        this.songsCount = songs_count
        this.queueDuration = formatSecondsToTime(queue_duration)
    }

    setLoopMode(mode: AudioPlayerLoopMode){
        switch (mode){
            case "disabled":
                this.loop = "–í—ã–∫–ª—é—á–µ–Ω–æ"
                break
            case "song":
                this.loop = "–ü–µ—Å–Ω—è"
                break
            case "queue":
                this.loop = "–û—á–µ—Ä–µ–¥—å"
                break
        }
    }

    setNextSong(songName: string | undefined){
        if (songName === undefined){
            this.nextSong = "–ü—É—Å—Ç–æ"
            return
        }
        this.nextSong = songName
    }

    setSongDuration(currentSeconds: number, maxSeconds: number = this.maxDuration, isLive = false){
        this.currentDuration = currentSeconds
        this.maxDuration = maxSeconds
        this.formattedCurrentDuration = formatSecondsToTime(currentSeconds)
        if (isLive){
            this.formattedMaxDuration = "–ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è"
            this.duration_bar = `|${progressBar.splitBar(1, 1, 1, undefined, 'üî∑')[0]}|`
        }else{
            this.formattedMaxDuration = formatSecondsToTime(maxSeconds)
            this.duration_bar = `|${progressBar.splitBar(maxSeconds, currentSeconds, 26, undefined, 'üî∑')[0]}|`
        }
    }
}