import {CommandArgument, ICommand, ICommandGroup} from "../../CommandTypes.js";
import {
    Client,
    EmbedBuilder,
    Guild,
    GuildMember,
    PermissionResolvable,
    PermissionsBitField,
    SlashCommandBuilder
} from "discord.js";
import "../../Types.js"
import * as process from "process";
import {GroupInfo} from "./InfoTypes.js";
import {getGuildOption} from "../../handlers/MongoSchemas/SchemaGuild.js";

const command : ICommand = {
    name: "help",
    description: "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥",
    arguments: [new CommandArgument("–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")],
    group: GroupInfo,
    bot_permissions: [PermissionsBitField.Flags.SendMessages],
    slash_builder: new SlashCommandBuilder()
        .setName("help")
        .setDescription("–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
        .addStringOption(option =>
            option.setName('command')
                .setNameLocalizations({
                    ru: '–∫–æ–º–∞–Ω–¥–∞'
                })
                .setDescription('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–± —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ')
                .setRequired(false)
                .setAutocomplete(true)
        ),
    autocomplete: async (interaction) => {
        const commandsList = [...interaction.client.commands].map((commandEntry) => {
            return {
                name: commandEntry[0],
                value: commandEntry[0]
            }
        })

        await interaction.respond(commandsList)
    },
    execute: async (interaction) => {
        const commandName: string | null = interaction.options.getString('command')
        if (commandName) { // –ï—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫
            if (interaction.guild && interaction.member) {
                await interaction.reply({
                    embeds: [generateSpecificCommandHelp(commandName, interaction.client, {
                        guild: interaction.guild,
                        member: interaction.member as GuildMember
                    })], ephemeral: true
                })
                return
            }
            await interaction.reply({
                embeds: [generateSpecificCommandHelp(commandName, interaction.client)], ephemeral: true
            })
        } else {
            await interaction.reply({ embeds: [await generateCommandsEmbedList(interaction.client, interaction.guild)], ephemeral: true })
        }
    },
    executeText: async (message, args) => {
        const commandName: string = args[0]
        if (commandName) { // –ï—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫
            if (message.guild && message.member) {
                await message.reply({
                    embeds: [generateSpecificCommandHelp(commandName, message.client, {guild: message.guild, member: message.member})],
                    allowedMentions: { users : []}
                })
                return
            }
            await message.reply({
                embeds: [generateSpecificCommandHelp(commandName, message.client)],
                allowedMentions: { users : []}
            })
        } else { // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            await message.reply({
                embeds: [await generateCommandsEmbedList(message.client, message.guild)],
                allowedMentions: { users : []}
            })
        }
    }
}
export function generateSpecificCommandHelp (commandName: string, client: Client, guildData?: {guild: Guild, member: GuildMember}) {
    const command = client.commands.get(commandName)

    const helpEmbed = new EmbedBuilder()
        .setColor('#436df7')
        .setTitle(`–ö–æ–º–∞–Ω–¥–∞ ${commandName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)

    if (!command) {
        return helpEmbed
    }

    let argument_string = ""

    if (command.arguments){
        command.arguments.forEach((value: { required: any; name: any; }) => {
            if (value.required){
                argument_string += `${value.name} `
            }else{
                argument_string += `<${value.name}> `
            }
        })
    }

    helpEmbed
        .setTitle(`/${command.name} ${argument_string}`)
        .setDescription(command.description)

    helpEmbed.addFields({ name: '‚úâÔ∏è –†–∞–∑—Ä–µ—à–µ–Ω–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö', value: command.guild_only ? "‚ùå –ù–µ—Ç" : "‚úÖ –î–∞", inline: false })

    if (guildData){
        if (!guildData.guild.members.me) {helpEmbed.setTitle(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`); return helpEmbed;}

        let permissionsBotString = ''
        const bot = guildData.guild.members.me

        command.bot_permissions.forEach(function (value: PermissionResolvable) {
            if (bot.permissions.has(value)) {
                permissionsBotString += '‚úÖ'
            } else {
                permissionsBotString += '‚ùå'
            }
            permissionsBotString += '  ' + convertPermissionsToLocaleString(value) + '\n'
        })

        helpEmbed.addFields({ name: 'ü§ñ –ü—Ä–∞–≤–∞ —Ç—Ä–µ–±—É–µ–º—ã–µ –¥–ª—è –±–æ—Ç–∞', value: permissionsBotString || '–ü—Ä–∞–≤–∞ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è', inline: true })

        let permissionsMemberString = '–ü—Ä–∞–≤–∞ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'

        if (command.user_permissions){
            permissionsMemberString = ''
            command.user_permissions.forEach(function (value: PermissionResolvable) {
                if (guildData.member.permissions.has(value)) {
                    permissionsMemberString += '‚úÖ'
                } else {
                    permissionsMemberString += '‚ùå'
                }
                permissionsMemberString += '  ' + convertPermissionsToLocaleString(value) + '\n'
            })
        }

        helpEmbed.addFields({ name: 'üê∏ –ü—Ä–∞–≤–∞ —Ç—Ä–µ–±—É–µ–º—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', value: permissionsMemberString, inline: true })
    }

    return helpEmbed
}

export async function generateCommandsEmbedList(client: Client, guild?: Guild | null): Promise<EmbedBuilder> {
    let prefixes_string = process.env.BOT_COMMAND_PREFIX

    if (guild){
        const prefix = await getGuildOption(guild, "prefix")
        if (prefixes_string !== prefix) {
            prefixes_string += " –∏–ª–∏ " + prefix
        }
    }

    const helpEmbed = new EmbedBuilder()
        .setColor('#436df7')
        .setTitle('–°–ø—Ä–∞–≤–∫–∞ –æ –∫–æ–º–∞–Ω–¥–∞—Ö')
        .setDescription(
            `–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –æ—Ä–¥–∏–Ω–∞—Ä–Ω—ã–π / (—Ç–æ–≥–¥–∞ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∫—Ç–æ –Ω–µ —É–≤–∏–¥–∏—Ç) 
            –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã: ${prefixes_string}\n
            –ù–∞–ø–∏—à–∏—Ç–µ help <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã> —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏\n
            <–ø–∞—Ä–∞–º–µ—Ç—Ä> - –ü–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–º–∞–Ω–¥—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω 
            `
        )

    client.commandsGroups.forEach((group) => {
        let commandsList = ''
        group.commands.forEach((value: ICommand) => {
            commandsList += `\`${value.name}\`, `
        })
        helpEmbed.addFields({
            name: group.icon_emoji + convertGroupToLocaleString(group),
            value: commandsList.slice(0, -2),
            inline: false
        })
    })

    return helpEmbed
}

function convertGroupToLocaleString (group: ICommandGroup): string {
    switch (group.name) {
        case 'audio': return '–ê—É–¥–∏–æ'
        case 'fun': return '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'
        case 'info': return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        case 'admin': return '–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞'
        default: return group.name
    }
}

function convertPermissionsToLocaleString (permission: PermissionResolvable): string {
    switch (permission) {
        case PermissionsBitField.Flags.Administrator: return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        case PermissionsBitField.Flags.SendMessages: return '–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'
        case PermissionsBitField.Flags.ManageMessages: return '–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏'
        case PermissionsBitField.Flags.Connect: return '–ü–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è'
        case PermissionsBitField.Flags.Speak: return '–ì–æ–≤–æ—Ä–∏—Ç—å'
        case PermissionsBitField.Flags.ViewChannel: return '–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã'
        case PermissionsBitField.Flags.AttachFiles: return '–ü—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã'
        case PermissionsBitField.Flags.ViewAuditLog: return '–ü—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–∞ –∞—É–¥–∏—Ç–∞'
        default: return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤: ' + permission
    }
}

export default command
