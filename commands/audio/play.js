const Discord = module.require('discord.js')
require('fs')
const { distube } = require('../../main')
const { isValidURL, generateRandomCharacters, clamp, CheckAllNecessaryPermission } = require('../../custom_modules/tools')
const { RepeatMode } = require('distube')
const { getVoiceConnection } = require('@discordjs/voice')
const { Permissions } = require('discord.js')
const fs = require('fs')
const ytdl = require('ytdl-core')
const Audioplayer = require('../../custom_modules/Audioplayer/Audioplayer')
const { PLAYER_FIELDS, pausePlayer } = require('../../custom_modules/Audioplayer/Audioplayer')

module.exports.help = {
  name: 'play',
  group: 'audio',
  arguments: '(–∑–∞–ø—Ä–æ—Å)',
  description:
        '–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –º—É–∑—ã–∫—É —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. \n' +
        '–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è:\n –°—Å—ã–ª–∫–∞ —Å Youtube/Spotify/Soundcloud\n1 –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (mp3, wav –∏–ª–∏ ogg)\n–õ—é–±–∞—è –ø–∏—Å–∞–Ω–∏–Ω–∞, –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–∏—Å–∫',
  bot_permissions: [Permissions.FLAGS.SEND_MESSAGES, Permissions.FLAGS.CONNECT, Permissions.FLAGS.VIEW_CHANNEL, Permissions.FLAGS.SPEAK, Permissions.FLAGS.MANAGE_MESSAGES, Permissions.FLAGS.ATTACH_FILES]
}

module.exports.run = async (client, message, args) => {
  // –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!message.member.voice.channel) { await message.reply('–ó–∞–π–¥–∏ —Å–Ω–∞—á–∞–ª–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª'); return }
  let userSearch = ''// –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å—Å—ã–ª–∫–∞ (—Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç), –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –ª—é–±–∞—è –±–µ–ª–µ–±–µ—Ä–¥–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –ø–æ–∏—Å–∫

  if (message.attachments.size > 0) { // –ï—Å–ª–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
    userSearch = message.attachments.first().url// –ë–µ—Ä—ë–º —Å—Å—ã–ª–∫—É –∏–∑ Discord CDN –Ω–∞ —Ñ–∞–π–ª
    if (!userSearch.endsWith('.mp3') && !userSearch.endsWith('.wav') && !userSearch.endsWith('.ogg')) {
      await message.reply('–≠—Ç–æ –Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª, —ç—Ç–æ —á—ë—Ä—Ç –ø–æ–π–º–∏ —á—Ç–æ!'); return
    }
  } else { // –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –≤—Å—ë —Ç–∞–∫–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –±–µ–ª–µ–±–µ—Ä–¥—ã
    if (args[0] === undefined) { await message.reply('–ê —á—Ç–æ —Ç—ã —Å–ª—É—à–∞—Ç—å —Ö–æ—á–µ—à—å, —Ç–æ –∞? –£–∫–∞–∂–∏ —Ö–æ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å.'); return }// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª
    if (args[0] === '') { await message.reply('–¢—ã –∫–∞–∫-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤—ë–ª –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.'); return }// –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã

    args.forEach((item) => { // –°–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ –∫—É—á—É –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–¥–æ–±–Ω–µ–µ –±—ã–ª–æ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø–µ—Å–µ–Ω
      userSearch += item
    })
  }

  let songToPlay// –≠—Ç–∞ —à—Ç—É–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
  const guildID = message.guildId

  if (isValidURL(userSearch)) { // –ï—Å–ª–∏ —Ç–æ —á—Ç–æ –¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–∫ —Å—Å—ã–ª–∫—É
    songToPlay = userSearch// –í–Ω–µ–∑–∞–ø–Ω–æ —ç—Ç–æ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å—Å—ã–ª–∫–∞, —Ç–æ —Å—Ä–∞–∑—É –µ–±–∞—à–∏–º –∑–∞–ø—Ä–æ—Å –≤ –ø–ª–µ–µ—Ä
    await startPlayer()
  } else {
    await searchSong()// –ê –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞, —Ç–æ –∏—â–µ–º –ø–µ—Å–Ω—é
  }

  async function searchSong () { // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∏—Å–∫ –∏–∑ 10 –ø–µ—Å–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let foundSongs// –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω
    try {
      foundSongs = await distube.search(userSearch, { limit: 10 }).then(function (result) { // –ò—â–µ–º –ø–µ—Å–Ω–∏
        return result
      })
    } catch (e) {
      await message.reply({ content: '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', ephemeral: true })
      return
    }

    let foundSongsFormattedList = ''// –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ç–æ —á—Ç–æ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ

    foundSongs.forEach((item, index) => { // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–µ—Å–Ω–∏ –≤ —Å–ø–∏—Å–∫–µ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
      foundSongsFormattedList += `**${index + 1}**.  ` + `[${item.name}](${item.url})` + ' ‚Äî ' + ` \`${item.formattedDuration}\` ` + '\n'
    })

    const foundSongsEmbed = new Discord.MessageEmbed()
      .setColor('#436df7')
      .setAuthor({ name: 'üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ üîé' })
      .setTitle('–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –ø–µ—Å–Ω–∏ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ //), —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ—ë, —É –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥!')
      .setDescription(foundSongsFormattedList)

    const filter = m => m.author.id === message.author.id// –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–æ–≥–æ –∫—Ç–æ –¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å

    await message.channel.send({ embeds: [foundSongsEmbed] }).then((collected) => { // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      const resultMessage = collected

      message.channel.awaitMessages({ // –ñ–¥—ë–º —Ü–∏—Ñ—Ä—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–µ—Å–Ω–µ–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        filter,
        max: 1,
        time: 30000,
        errors: ['time']
      })
        .then(async selectMessage => {
          selectMessage = selectMessage.first()
          const parsedSelectedSong = parseInt(selectMessage.content)// –ü—ã—Ç–∞–µ–º—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
          if (!isNaN(parsedSelectedSong) && !Number.isInteger(selectMessage.content)) { // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, —Ç–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–µ–ª—ã.
            songToPlay = foundSongs[clamp(parsedSelectedSong, 1, 10) - 1]// –ó–∞–±–∏—Ä–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
            await startPlayer()
            await selectMessage.delete()
            await resultMessage.delete()
          } else {
            await selectMessage.reply({
              content: '–í—ã —É–∫–∞–∑–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å!',
              ephemeral: true
            })
            await message.delete()
            await resultMessage.delete()
          }
        })
        .catch(async () => { // –ï—Å–ª–∏ –∏—Å—Ç—ë–∫ —Ç–∞–π–º–µ—Ä
          await message.reply({ content: '–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏', ephemeral: true })
          await message.delete()
          resultMessage.delete()
        })
    })
  }

  async function startPlayer () { // –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –ø–ª–µ–µ—Ä, —Å–µ—Ä–¥—Ü–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.
    const userChannel = message.member.voice.channel
    const options = {
      textChannel: message.channel,
      member: message.member
    }
    try {
      if (musicPlayerMap[guildID]) {
        await distube.play(userChannel, songToPlay, options)
        return
      }
    } catch (e) {
      message.channel.send('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —ç—Ç–∏–º –∞—É–¥–∏–æ, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å—Ç—Ä–∞–Ω–µ –±–æ—Ç–∞ (–£–∫—Ä–∞–∏–Ω–∞)')
      return
    }

    const Player = Audioplayer.createPlayerEmbed()

    const musicPlayerMessage = await message.channel.send(Player) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–µ–µ—Ä–æ–º
    musicPlayerMap[guildID] = {
      MessageID: musicPlayerMessage.id,
      ChannelID: musicPlayerMessage.channel.id,
      PlayerEmbed: Player.embeds[0],
      Collector: ''
    }

    const filter = button => button.customId

    const collector = musicPlayerMessage.channel.createMessageComponentCollector({ filter })
    musicPlayerMap[guildID].Collector = collector

    await message.delete()

    collector.on('collect', async button => {
      if (!CheckAllNecessaryPermission(client, message, module.exports.help.bot_permissions)) { return }

      const connection = getVoiceConnection(message.guildId)

      if (button.customId === 'show_queue') {
        const queue = distube.getQueue(message)
        if (!queue) {
          await button.reply({ content: '–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è', ephemeral: true })
        } else {
          let queueList = ''
          queue.songs.forEach((song, id) => {
            if (id === 0) { return }
            queueList += `${id}. ` + `[${song.name}](${song.url})` + ` - \`${song.formattedDuration}\`\n`
          })

          const queueEmbed = new Discord.MessageEmbed()
            .setAuthor({ name: '–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: ' })
            .setTitle(queue.songs[0].name).setURL(queue.songs[0].url)
            .setDescription(`**–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–µ—Å–Ω–∏: **\n${queueList}`.slice(0, 4096))
          await button.reply({ embeds: [queueEmbed], ephemeral: true }
          )
        }
      }

      if (button.customId === 'download_song') {
        const filePath = fs.createWriteStream(`${generateRandomCharacters(15)}.mp3`)
        const song = distube.getQueue(message).songs[0]

        const fileName = `${song.name}.mp3`
        ytdl(song.url, { filter: 'audioonly', format: 'mp3' }).on('end', async () => {
          await fs.rename(filePath.path, fileName, err => { if (err) throw err })
          const stats = fs.statSync(fileName)
          if (stats.size >= 8388608) {
            await button.message.channel.send({ content: `${message.author} —è –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ —á–µ–º 8–º–±.` })
          } else {
            await button.message.channel.send({ content: `${message.author} —è —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –∑–≤—É–∫`, files: [fileName] })
          }

          fs.unlink(fileName, err => { if (err) throw err })
        }).pipe(filePath)
      }

      if (connection) {
        if (connection.joinConfig.channelId !== button.member.voice.channelId) {
          await button.message.channel.send({ content: `${button.user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏, –Ω–æ –æ–Ω –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ —Å–æ –º–Ω–æ–π!` })
          return
        }
      } else {
        if (distube.getQueue(message)) {
          await distube.stop(message)
        }
      }

      /*
            if(button.member.permissions.has('MANAGE_GUILD') || button.member.user.id === message.author.id || message.guild.me.voice.channel.members.size < 2){
            }else{
                await button.reply({content: "–£ —Ç–µ–±—è –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–ª–µ–µ—Ä–∞", ephemeral: true})
                return
            }
      */
      if (button.customId === 'stop_music') {
        await Audioplayer.stopPlayer(distube, message.guild)
        await button.message.channel.send({ content: `${button.user.username} –≤—ã–∫–ª—é—á–∏–ª –ø–ª–µ–µ—Ä` })
      }

      if (button.customId === 'pause_music') {
        await pausePlayer(distube, button.message)
        await button.deferUpdate()
      }

      if (button.customId === 'toggle_repeat') {
        const queue = distube.getQueue(message)
        if (queue) {
          const repeat = queue.repeatMode
          let mode
          switch (repeat) {
            case RepeatMode.DISABLED:
              queue.setRepeatMode(1)
              mode = '–ü–µ—Å–Ω—è'
              break
            case RepeatMode.SONG:
              queue.setRepeatMode(2)
              mode = '–û—á–µ—Ä–µ–¥—å'
              break
            case RepeatMode.QUEUE:
              queue.setRepeatMode(0)
              mode = '–í—ã–∫–ª—é—á–µ–Ω'
              break
          }

          Audioplayer.editField(guildID, PLAYER_FIELDS.repeat_mode, mode)
        }
        await button.update({ embeds: [musicPlayerMap[guildID].PlayerEmbed] })
      }

      if (button.customId === 'skip_song') {
        try {
          await distube.skip(message)
          await button.reply({ content: `–ü–æ –∑–∞–ø—Ä–æ—Å—É –æ—Ç ${button.user} –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø–µ—Å–Ω—è` })
          if (distube.getQueue(message).paused) {
            await distube.resume(message)
          }
        } catch (e) {
          await button.reply({ content: '–í –æ—á–µ—Ä–µ–¥–∏ –¥–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç', ephemeral: true })
        }
      }
    })

    try {
      await distube.play(userChannel, songToPlay, options)
    } catch (e) {
      message.channel.send('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —ç—Ç–∏–º –∞—É–¥–∏–æ, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å—Ç—Ä–∞–Ω–µ –±–æ—Ç–∞ (–£–∫—Ä–∞–∏–Ω–∞)')
    }
  }
}
