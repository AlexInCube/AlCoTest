const Discord = module.require("discord.js");
require("fs");
const {distube} = require("../main");
const {MessageActionRow, MessageButton} = require("discord.js");
const {isUserConnectedToSameVoice, isValidURL} = require("../tools");

module.exports.help = {
    name: "play"
};

module.exports.run = async (client,message,args) => {
    let user_search = args[0]
    //–ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!message.member.voice.channel) {message.reply("–ó–∞–π–¥–∏ —Å–Ω–∞—á–∞–ª–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª"); return}
    if (user_search === undefined) {message.reply("–ê —á—Ç–æ —Ç—ã —Å–ª—É—à–∞—Ç—å —Ö–æ—á–µ—à—å, —Ç–æ –∞? –£–∫–∞–∂–∏ —Ö–æ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å.");return}
    if (user_search === ""){message.reply("–¢—ã –∫–∞–∫-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤—ë–ª –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."); return}

    let songToPlay;
    if (isValidURL(user_search)){
        songToPlay = user_search
        await startPlayer()
    }else{
        await searchSong()
    }

    async function searchSong() {
        //–ò—â–µ–º –º—É–∑—ã–∫—É
        let foundSongs = await distube.search(user_search, {limit: 10}).then(function (result) {
            return result
        });

        if (foundSongs === undefined) {
            await message.reply("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        }

        let foundSongsFormattedList = "";

        foundSongs.forEach((item, index) => {
            foundSongsFormattedList += `**${index + 1}**.  ` + `[${item.name}](${item.url})` + " ‚Äî " + ` \`${item.formattedDuration}\` ` + "\n"
        })

        let foundSongsEmbed = new Discord.MessageEmbed()
            .setColor('#436df7')
            .setAuthor("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
            .setTitle(`–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –ø–µ—Å–Ω–∏ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ //), —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ—ë, —É –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥!`)
            .setDescription(foundSongsFormattedList)

        let filter = m => m.author.id === message.author.id;

        await message.channel.send({embeds: [foundSongsEmbed], ephemeral: true}).then(() => {
            message.channel.awaitMessages({
                filter,
                max: 1,
                time: 30000,
                errors: ['time']
            }).then(message => {
                message = message.first()
                let parsedSelectedSong = parseInt(message.content);
                if (!isNaN(parsedSelectedSong)) {
                    songToPlay = foundSongs[parsedSelectedSong - 1]
                    message.reply({content: foundSongs[parsedSelectedSong - 1].name})
                    startPlayer()
                } else {
                    message.reply(`–í—ã —É–∫–∞–∑–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ, –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ —á–∏—Å–ª–æ!`)
                }
            })
                .catch(() => {
                    message.reply('–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏');
                });
        })
    }

    async function startPlayer() {
        //–ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        let music_queue = distube.getQueue(message);
        let guildID = message.guildId;

        if (music_queue !== undefined && musicPlayerMap[guildID]) {
            await distube.play(message, songToPlay);
            return
        }

        let musicPlayerEmbed = new Discord.MessageEmbed()//–°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–µ–µ—Ä–æ–º
            .setColor('#f7ee43')
            .setAuthor("‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ ‚åõ")
            .addFields(
                {name: '–ê–≤—Ç–æ—Ä: ', value: '–ù–∏–∫—Ç–æ'},
                {name: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ', value: '0'},
            )

        const musicPlayerRow = new MessageActionRow()//–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–ª–µ–µ—Ä–∞
            .addComponents(
                new MessageButton().setCustomId("stop_music").setLabel("–í—ã–∫–ª—é—á–∏—Ç—å").setStyle("DANGER"),
                new MessageButton().setCustomId("pause_music").setLabel("–ü–∞—É–∑–∞ / –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å").setStyle("PRIMARY"),
                new MessageButton().setCustomId("skip_song").setLabel("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å").setStyle("PRIMARY"),
                new MessageButton().setCustomId("show_queue").setLabel("–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å").setStyle("SECONDARY"),
            )


        let musicPlayerMessage = await message.channel.send({embeds: [musicPlayerEmbed], components: [musicPlayerRow]}); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–µ–µ—Ä–æ–º
        musicPlayerMap[guildID] = {
            MessageID: musicPlayerMessage.id,
            ChannelID: musicPlayerMessage.channel_id,
            PlayerEmbed: musicPlayerEmbed
        }

        await distube.play(message, songToPlay)

        filter = button => button.customId;

        const collector = musicPlayerMessage.channel.createMessageComponentCollector({filter});

        const button_function = (async button => {
            if (!isUserConnectedToSameVoice(message, button)) {
                await button.message.channel.send({content: `${button.user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏, –Ω–æ –æ–Ω –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ —Å–æ –º–Ω–æ–π!`})
                return
            }

            if (button.customId === 'stop_music') {
                await distube.stop(message);
                collector.off('collect', button_function);
                await button.message.delete();
            }

            if (button.customId === 'pause_music') {
                let pause = distube.getQueue(message).paused;
                if (pause) {
                    await distube.resume(message);
                    musicPlayerMap[guildID].PlayerEmbed.setAuthor(`üéµ –ò–≥—Ä–∞–µ—Ç üéµ`).setColor('#49f743');
                } else {
                    await distube.pause(message);
                    musicPlayerMap[guildID].PlayerEmbed.setAuthor(`‚è∏ –ü–∞—É–∑–∞ ‚è∏`).setColor('#f74343');
                }

                await button.update({embeds: [musicPlayerMap[guildID].PlayerEmbed]});
            }

            if (button.customId === 'skip_song') {
                await button.deferUpdate();
                try {
                    await distube.skip(message);
                    await button.message.channel.send("–ü—Ä–æ–ø—É—â–µ–Ω–æ")
                    let pause = distube.getQueue(message).paused;
                    if (pause) {
                        await distube.resume(message);
                        musicPlayerMap[guildID].PlayerEmbed.setAuthor(`üéµ –ò–≥—Ä–∞–µ—Ç üéµ`).setColor('#49f743');
                    }
                } catch (e) {
                    await button.message.channel.send("–í –æ—á–µ—Ä–µ–¥–∏ –¥–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç");
                    return;
                }
            }

            if (button.customId === 'show_queue') {
                const queue = distube.getQueue(message);
                if (!queue) {
                    await button.reply({content: '–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è', ephemeral: true})
                } else {
                    await button.reply({
                            content: `–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n${queue.songs
                                .map(
                                    (song, id) =>
                                        `**${id ? id : '–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç'}**. ${song.name} - \`${
                                            song.formattedDuration
                                        }\``,
                                )
                                .slice(0, 10)
                                .join('\n')}`, ephemeral: true
                        }
                    )
                }
            }
        });

        collector.on('collect', button_function)
    }
};
