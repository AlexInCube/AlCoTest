const { MessageActionRow, MessageButton, Permissions } = require('discord.js')
const { setupUserData } = require('../../custom_modules/mySQLSetup')
const Discord = module.require('discord.js')

module.exports.help = {
  name: 'rps',
  group: 'fun',
  arguments: '(@–∏–º—è_—Å–æ–ø–µ—Ä–Ω–∏–∫–∞)',
  description: '–ö–∏–Ω—å—Ç–µ –≤—ã–∑–æ–≤ –≤ "–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞!" –ø—Ä–æ—Ç–∏–≤ –ª—é–±–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ —É–Ω–∏—á—Ç–æ–∂—å—Ç–µ —Å–≤–æ–µ–≥–æ –≤—Ä–∞–≥–∞!',
  bot_permissions: [Permissions.FLAGS.SEND_MESSAGES]
}

module.exports.run = async (client, message) => {
  const userAttacker = message.author
  const userDefender = message.mentions.users.first()

  if (!userDefender) { message.reply('–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–≥–æ —Ç—ã –≤—ã–∑–≤–∞–ª'); return }
  if (userDefender.bot) { message.reply('–° —Ä–æ–±–æ—Ç–∞–º–∏ –∏–≥—Ä–∞—Ç—å –Ω–µ–ª—å–∑—è, –æ–Ω–∏ —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–≤–µ—Ç—è—Ç, –Ω–∞–π–¥–∏ —Å–µ–±–µ –¥—Ä—É–∑–µ–π.'); return }
  if (userAttacker.id === userDefender.id) { message.reply('–ù–µ–ª—å–∑—è –∫–∏–Ω—É—Ç—å –≤—ã–∑–æ–≤ —Å–∞–º–æ–º—É —Å–µ–±–µ'); return }

  const items = {
    rock: 'üóø',
    scissors: '‚úÇÔ∏è',
    paper: 'üßª'
  }

  const duelEmbed = new Discord.MessageEmbed()
    .setColor('#ffffff')
    .setTitle(`${userAttacker.username} –∫–∏–Ω—É–ª –≤—ã–∑–æ–≤ ${userDefender.username}`)
    .setDescription('–í—ã–±–∏—Ä–∞–π –æ—Ä—É–∂–∏–µ –∏ –∂–¥–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞, –Ω–∞ –æ—Ç–≤–µ—Ç –¥–∞—ë—Ç—Å—è 10 —Å–µ–∫—É–Ω–¥.')

  const duelButtons = new MessageActionRow()
    .addComponents(
      new MessageButton().setCustomId('rock').setLabel(items.rock + '–ö–∞–º–µ–Ω—å').setStyle('PRIMARY'),
      new MessageButton().setCustomId('paper').setLabel(items.paper + '–ë—É–º–∞–≥–∞').setStyle('PRIMARY'),
      new MessageButton().setCustomId('scissors').setLabel(items.scissors + '–ù–æ–∂–Ω–∏—Ü—ã').setStyle('PRIMARY')
    )

  const duelMessage = await message.channel.send({ embeds: [duelEmbed], components: [duelButtons] }) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–µ–µ—Ä–æ–º

  let attackerChoice, defenderChoice

  const filter = i => i.customId

  const collector = message.channel.createMessageComponentCollector({ filter, time: 10000 })

  collector.on('collect', async i => {
    if (i.user.id !== userAttacker.id && i.user.id !== userDefender.id) {
      await i.reply({ content: '–ù–µ —Ç–µ–±–µ –¥—É—ç–ª—å –∫–∏–¥–∞–ª–∏, –Ω–µ –¥–ª—è —Ç–µ–±—è —è–≥–æ–¥–∫–∞ —Ä–æ—Å–ª–∞.', ephemeral: true })
      return
    }

    if (i.customId === 'rock') {
      if (i.user.id === userAttacker.id) { attackerChoice = items.rock }
      if (i.user.id === userDefender.id) { defenderChoice = items.rock }

      await i.reply({ content: `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${items.rock}`, ephemeral: true })
    }

    if (i.customId === 'paper') {
      if (i.user.id === userAttacker.id) { attackerChoice = items.paper }
      if (i.user.id === userDefender.id) { defenderChoice = items.paper }

      await i.reply({ content: `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${items.paper}`, ephemeral: true })
    }

    if (i.customId === 'scissors') {
      if (i.user.id === userAttacker.id) { attackerChoice = items.scissors }
      if (i.user.id === userDefender.id) { defenderChoice = items.scissors }

      await i.reply({ content: `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${items.scissors}`, ephemeral: true })
    }

    if (attackerChoice !== undefined && defenderChoice !== undefined) {
      await setupUserData(userAttacker.id, 'rps_stats')
      await setupUserData(userDefender.id, 'rps_stats')

      const resultEmbed = new Discord.MessageEmbed()// –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–µ–µ—Ä–æ–º
        .setColor('#49f743')

      let attackerQuery = ''; let defenderQuery = ''
      switch (getResult(attackerChoice, defenderChoice)) {
        case 0:
          resultEmbed.setTitle(`${userDefender.username} –ø–æ–±–µ–¥–∏–ª(-–∞) –ø—Ä–æ—Ç–∏–≤ ${userAttacker.username}`)
          attackerQuery = `UPDATE rps_stats SET total_games = total_games+1 WHERE user_id = ${userAttacker.id}`
          defenderQuery = `UPDATE rps_stats SET total_games = total_games+1, wins = wins+1  WHERE user_id = ${userDefender.id}`
          break
        case 1:
          resultEmbed.setTitle(`${userAttacker.username} –ø–æ–±–µ–¥–∏–ª(-–∞) –ø—Ä–æ—Ç–∏–≤ ${userDefender.username}`)
          attackerQuery = `UPDATE rps_stats SET total_games = total_games+1, wins = wins+1 WHERE user_id = ${userAttacker.id}`
          defenderQuery = `UPDATE rps_stats SET total_games = total_games+1 WHERE user_id = ${userDefender.id}`
          break
        case 2:
          resultEmbed.setTitle(`–£ ${userDefender.username} –∏ ${userAttacker.username} –≤—ã—à–ª–∞ –Ω–∏—á—å—è`).setColor('#ffffff')
          attackerQuery = `UPDATE rps_stats SET total_games = total_games+1, draws = draws + 1  WHERE user_id = ${userAttacker.id}`
          defenderQuery = `UPDATE rps_stats SET total_games = total_games+1, draws = draws + 1 WHERE user_id = ${userDefender.id}`
          break
      }

      mySQLconnection.query(attackerQuery, function (err) {
        if (err) throw err
      })

      mySQLconnection.query(defenderQuery, function (err) {
        if (err) throw err
      })

      await message.channel.send({
        embeds: [resultEmbed.addFields(
          { name: `–í—ã–±–æ—Ä ${userAttacker.username}`, value: attackerChoice, inline: true },
          { name: `–í—ã–±–æ—Ä ${userDefender.username}`, value: defenderChoice, inline: true }
        )]
      })

      collector.stop('winner_decided')
    }
  })

  collector.on('end', async (i, reason) => {
    duelMessage.delete()
    if (reason && reason !== 'winner_decided') { await message.reply('–î—É—ç–ª—å –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å, –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ') }
  })

  function getResult (attackChoice, defenderChoice) {
    if (attackChoice === items.rock && defenderChoice === items.scissors) {
      return 1
    } else if (attackChoice === items.paper && defenderChoice === items.rock) {
      return 1
    } else if (attackChoice === items.scissors && defenderChoice === items.paper) {
      return 1
    } else if (attackChoice === defenderChoice) {
      return 2
    } else {
      return 0
    }
  }
}
